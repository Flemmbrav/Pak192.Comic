################################################################################
#                                PAK192.COMIC                                  #
################################################################################
#          !!! I M P O R T A N T !!! --- !!! W I C H T I G !!!                 #
#                                                                              #
# English:                                                                     #
#  Please note that changes to this file errors in the conduct of the game can #
#  occur. Modify data only if they are absolutely sure that they know what     #
#  impact these changes have!                                                  #
#                                                                              #
# German:                                                                      #
#  Bitte beachten sie, das durch �nderungen an dieser Datei, Fehler im         #
#  Verhalten des Spieles auftreten k�nnen. Ver�ndern sie nur Daten wenn sie    #
#  absolut sicher sind, das sie Wissen was f�r Folgen diese �nderungen haben!  #
#                                                                              #
#                                                                              #
#   When you make changes in this file please remember that when you make a    #
#                       bug report in Simutrans Forum!                         #
################################################################################

# simuconf.tab - Low level configuring data

################################road settings###################################

#Ugly hotfix!
threads = 4

# how far cities should be minimum apart (default 16)
minimum_city_distance = 32

# Type of city roads - must be available as PAK file.
# order is random
# format is besch_name[,into_year[,retire_year]]
# if intro or retire is not given, the default dates from the pak is used

city_road[0] = cobblestreet, 0
city_road[1] = city_road, 1945


intercity_road[0] = dirt_road, 0
intercity_road[1] = lokal_road, 1900
intercity_road[2] = asphalt_road, 1950

# Max. length of intitial intercity road connections
# If you want to speed up map creation, lower this value
# If you want more initial intercity roads, raise this value
# 4000 will connect almost every city if possible
# note: this will slow down map creation dramatically!
#
intercity_road_length = 70

# This is the maximum number of tiles that a road, river or canal
# that is a public right of way may be diverted for an existing
# public right of way to be deleted. Diversion allows players to
# change the course of public rights of way to accomodate, for
# example, railways whilst protecting their integrity.

max_diversion_tiles = 100

# rivers:
# The highest number is the smallest. A river with max_speed==0 is not navigavable by ships.
river_type[0] = river_0
#river_type[1] = river_1
#river_type[2] = river_2

# start with 16 (looks nice on not too large maps)
river_number = 16

# river min length (not too short)
river_min_length = 20

# river max length (not too long?)
river_max_length = 512

#####################################gameplay###################################

# at which number of inhabitants we need a new market?
industry_increase_every = 5000

# passenger generation (default is 16) Smaller values means less passengers
passenger_factor=18

# in beginner mode, all good revenuses are multiplied by a factor (default 1500=1.5)
beginner_price_factor = 2100

# size of catchment area of a station (default 2)
# older game size was 3
# savegames with another catch area will be unloadable
station_coverage = 16

# things to overcrowded destinations won't load if active (default off)
avoid_overcrowding = 1

# if enabled (default = 0 off) stops may have different capacities for passengers, mail, and freight
seperate_halt_capacities = 1

# three modes (default = 0)
# 1: the payment is only relative to the distance to next interchange, 2 to the trips destination
# (default 0 is distance since last stop)
pay_for_total_distance = 2

# Convoy lengths that exceed the standards
max_rail_convoi_length = 64
# max_road_convoi_length = 32
# max_ship_convoi_length = 32
# max_air_convoi_length = 32

##################################industry stuff#################################

# allow all possible supplier to connect to your factories?
# This will also affect savegames!
# best to leave it in default position. (only on for simuTTD)
crossconnect_factories = 0

# how much is the total electric power available in releation to total production) in parts per thousand
electric_promille = 330

# how big is the chance for crossconnections in percent
# (100% will give nearly the same results as crossconnect_factories=1)
crossconnect_factories_percentage = 33

# with this switch on (default), overcrowded factories will not recieve goods any more
just_in_time = 1

# use beginner mode for new maps (can be switched anyway on the new map dialog)
first_beginner = 0

# Factory spacing (default = 6)
factory_spacing = 10

###################################money stuff##################################

# Starting money of the player. Given in Credit cents (1/100 Cr)
starting_money = 500000000

# Maintenance costs of buildings
maintenance_building = 2000

# buying obsolete vehicles is disallowed by default
allow_buying_obsolete_vehicles = 1

# you can adjust all the cost in the game, that are not inside some pak file

# first stops: the actual cost is (cost*level*width*height)
cost_multiply_dock=500
cost_multiply_station=600
cost_multiply_roadstop=250
cost_multiply_airterminal=3000
cost_multiply_post=300
cost_multiply_headquarter=1000

# cost for depots
cost_depot_rail=20000
cost_depot_road=5000
cost_depot_ship=25000

# other way related stuff
#cost_signal=250
cost_signal=2500
cost_tunnel=8000
cost_third_rail=80

# other construction/destruction stuff
cost_alter_land=10000
cost_buy_land=1000
cost_set_slope=25000
cost_found_city=25000000
cost_multiply_found_industry=20000
cost_remove_tree=100
cost_multiply_remove_haus=1000
cost_multiply_remove_field=5000

# unlimited bridges and tunnels
way_max_bridge_len = 4095

###################################time settings################################

# Starting year of the game:
# Setting it below 1845 is not recommended for 192comic set!
# You will have problems with missing vehicles, do not complain if you do so!
# Setting it above 2020 will render game bit boring - no new vehicles.
#
# other recommended vaule for 192comic is 1975
#
starting_year = 1975

# Starting month of the game for people who want to start in summer (default 1=January)
starting_month = 4

# Should month be shown in date?
# (0=no, 1=yes, 2>=show day in japan format=2, us format=3, german=4, japanese no season=5, us no season=6, german no season = 7, hours/minutes scale = 8)
# This is most useful, if you use longer months than the default length (see below)
# The hours/minutes scale shows the time in hours/minutes as used for determining journey times and other short times. It is the recommended setting. 
show_month = 8

# Global time multiplier (will be save with new games)
# 2^bits_per_month = duration of a game month in milliseconds real time
# default is 18. For example, 21 will make the month 2^3=8 times longer in real time
# production and maintainance cost will be adjusted accordingly.

bits_per_month = 22
################################ Vehicle settings ##############################

# These settings determine how vehicles take corners, for each individual type of way.  They
# only apply to vehicles that use fixed ways (road, rail, monorail, etc.), and not aircraft or
# ships. Note that these settings have changed substantially from versions earlier than 11.
# 
# corner_force_divider_[way type]: The maximum force as a proportion of G (gravitational force)
# that it is permissible for vehicles of this way type to experience when taking a corner. This
# number is expressed as a divider: e.g., a value of 10 is 1/10th of G, or 0.1G. The higher this
# number, the slower that vehicles have to travel in corners. 
#
# The explanation for this formula can be found here:
# https://books.google.co.uk/books?id=NbYqQSQcE2MC&pg=PA30&lpg=PA30&dq=curve+radius+speed+limit+formula+rail&source=bl&ots=mbfC3lCnX4&sig=qClyuNSarnvL-zgOj4HlTVgYOr8&hl=en&sa=X&ei=sBGwVOSGHMyBU4mHgNAC&ved=0CCYQ6AEwATgK#v=onepage&q=curve%20radius%20speed%20limit%20formula%20rail&f=false
# The value of 10 (i.e., 0.1G) is accurate for rail for modern practice in the UK. Road appears
# to work well at 5 (0.2G), but the value is an estimate. Superelevation is not accounted for.
# Tilting trains are defined for the individual vehicles.
#
# curve_friction_factor_[way type]: The number of times extra friction that applies as a vehicle 
# corners. 
#
# tilting_min_radius_effect: The minimum radius of a corner (in meters, calibrated according
# to the meters_per_tile setting) at which a tilting train can traverse a corner faster than
# a non-tilting train. 

corner_force_divider_road=5
corner_force_divider_track=10
corner_force_divider_tram=8
corner_force_divider_monorail=10
corner_force_divider_maglev=10
corner_force_divider_narrowgauge=10

curve_friction_factor_road=0
curve_friction_factor_track=0
curve_friction_factor_tram=2
curve_friction_factor_monorail=0
curve_friction_factor_maglev=0
curve_friction_factor_narrowgauge=0

# See here: http://self.gutenberg.org/article/WHEBN0019153780/Minimum%20railway%20curve%20radius
tilting_min_radius_effect=300

# These settings determine how long that it takes a road and rail vehicles to turn
# around when it reaches the end of the line. They do not apply to boats or aircraft.
#
# "road_reverse_time_seconds" refers to road vehicles.
#
# "unit_reverse_time_seconds" refers to trains/convoys, such as multiple units, that have
# a cab at each and, and can be driven in reverse without any re-arrangement of 
# the order of the vehicles. These will generally take the least time to reverse.
#
# "hauled_reverse_time_seconds" refers to trains/convoys that cannot be driven from the
# rear, so the locomotive at the front has to run around the train and attach
# to the rear, but where that locomotive can itself be driven in either direction,
# so that it does not need to turn around.
#
# "turntable_reverse_time_seconds" refers to trains/convoys that, as for the above category,
# cannot be driven from the rear, but that also require their locomotive to be turned
# around to face the other direction (such as steam locomotives with tenders) at the
# end of the journey. These will genearlly take the most time to reverse.
#
# All times are in game seconds. In previous versions, these were specified in internal
# milliseconds by "unit_reverse_time" (etc.) without "_seconds", but these values
# had to be adjusted manually to match the meters per tile setting. The old keywords
# "(unit_reverse_time)" etc. still work, but are overridden by the "..._seconds" version
# where they are present. 

road_reverse_time_seconds=30
unit_reverse_time_seconds=60
hauled_reverse_time_seconds=120
turntable_reverse_time_seconds=360

# This setting allows the way in which weight limits are enforced to be customised.
# The meanings of each setting are as follows:
# 0: weight limits are ignored entirely. 
# 1: then vehicles can travel over roads, rails, tunnels and bridges for which they are too heavy, but only at greatly reduced speed. 
# 2: Vehicles cannot travel over ways for which they are overweight at all. 
# 3: Vehciles cannot travel over ways for which they are more than 10% overweight at all, and will travel on ways for which they are up to 10% overweight at a greatly reduced speed.
#
# To revert to the behaviour of Simutrans-Standard, set enforce_weight_limits=0

enforce_weight_limits=3

# This is the distance in meters at which train drivers can see signals ahead.
# Trains have to brake in time for signals which might be at danger, so this
# distance affects train speed. 

sighting_distance_meters = 875

# This is the maximum speed in km/h at which rail (including narrow gauge, monorail and maglev)
# vehicles may travel in the drive by sight working method. 0 = as fast as they can
# stop within their sighting distance with no other limit.
#
# 50kph "Permissives Fahren" in east Germany?

max_speed_drive_by_sight_kmh = 50
max_speed_drive_by_sight_tram_kmh = 70

# Corners of greater than 45 degrees have their radius calculated. However, because of 
# the rigid tile system in Simutrans, this produces unrealistic results when applied
# to corners of 45 degrees. A value is thus specified here. This affects the speed
# at which vehicles can take pairs of directionally correcting 45 degree corners
# (i.e. not a pair of 45 degree corners which between them add up to 90 degrees,
# which can be calculated more easily and are dealt with by a separate system). 
#
# If this is set to 0, pairs of self-correcting 45 degree corners are treated
#  as being straight.
# 
# For any other value, this serves as a minimum assumed radius for any given pair
# of self-correcting 45 degree corners. A calculated value will be used to work
# out what the radius of the self-correcting corners should be, but, because of 
# the rigid tile system in Simutrans, it is not possible to make gentle corners,
# so set this as a minimum to allow for this. 
#
assumed_curve_radius_45_degrees = 750


################################## display #####################################

# Should stations get numbered names? (1=yes, 0=no)
numbered_stations = 0

# when set here, the player will always get these player colors, even
# if random colors were enabled.
# color values range from 0 to 27 for first and second player color
# and there are 0...15 player in the game
player_color[0] = 16,3

# player color can be fixed for several players or set totally random
# in the latter case each player will get unique but random coloring
# (default 0)
random_player_colors = 0

# animate the water each intervall (if images available)
# costs some time for the additional redraw (~1-3%)
water_animation_ms = 250


# Color of cursor overlay, which is blended over marked ground tiles
cursor_overlay_color = 100

##################################forest stuff#################################
max_no_of_trees_on_square = 4

# Base forest size - minimal size of forest - map independent
forest_base_size = 36

# Map size divisor - smaller it is the larger are individual forests
forest_map_size_divisor = 38

# Forest count divisor - smaller it is, the more forest are generated
forest_count_divisor = 16

# Determins how dense are spare trees going to be planted (works inversly)
forest_inverse_spare_tree_density = 400

# climate with trees entirely (1: water, 2:desert, 4:tropic, 8:mediterran, 16:temperate, 32:tundra, 64:rocky, 128:arctic)
# zero (default) means no climate with at least one tree per tile
tree_climates = 4

# climates with no trees at all (desert and arctic at the moment)
no_tree_climates = 0

##################################ground stuff#################################

# show random objects to break uniformity (every n suited tiles)
random_grounds_probability = 600

##################################half heights#################################
tile_height = 8
height_conversion_factor = 2



##################################Passengers and routing#################################
# This setting determines whether passengers can reach their journies by walking
# between stops en route. If this setting is false, passengers will walk from their
# origin to the start station/stop and from the destination station/stop to their
# destination, but will not walk between intermediate stops, even if the distance
# between the intermediate stops is the same as or less than the distance between
# their origin and the starting stop. If this setting is set to true then passengers
# will walk between intermediate stops as well as from their origin to the first stop 
# on their journey. 
#
# Note that, with the setting enabled, there is no means of preventing passengers from
# walking between two or more consecutive stops or from walking as the first or last stage
# in their journey, such that their overall walking distance is greater than the catchment
# area would be permissible for walking for the stop to or from which they are walking.
# This setting might also have the incidental effects of allowing a stop to take passengers
# from an area not covered by that stop's coverage radius, but covered by the radius of 
# another stop (possibly owned by a rival player) in the nearby vicinity, and of passengers
# walking instead of using player transport in some cases.
#
# 0 = off; 1 = on. Default: off.

allow_routing_on_foot = 1

# These settings are used to calculate adjusted figures based on the length of the month. 
# To assume a base month length based on the settings in Simutrans-Standard, use 1,000
# base_meters_per_tile and 18 base_bits_per_month.
# 
# To assume a base month length of 24 hours (to allow various settings to be calibrated
# as if months were days), use a base meters per tile of 7500
base_meters_per_tile = 1000
base_bits_per_month = 18

# This setting determines the rate at which jobs replenish. At the default, 100, all
# of a building's jobs replenish in exactly 1 month. At 200, it takes 2 months, and at
# 50, it takes 1/2 a month. This is useful when calibrating the month/year scale as
# against the hour/minute scale. If a month is timed as 6.4 hours (6:24), for example,
# a day (24 hours) consists of 3.75 "months". For jobs to replenish once every 24 hours,
# therefore, set this to 375 if the length of a month is 6:24.
job_replenishment_per_hundredths_of_months = 1500

# These settings determine the population, visitor demand, jobs and mail per "level" of building.
# Each of these things can be set independently in the buildings' .dat files, but for older paksets
# or paksets from Standard, only a "level" will be supplied, so these conversion factors are
# important in those cases.
population_per_level = 8
visitor_demand_per_level = 8
jobs_per_level = 6
mail_per_level = 3

# These settings determine the number of passenger trips that each person makes per game month
# and the number of items of mail that each unit of mail demand produces per month, in 1/100ths.
# This does *not* include onward and return trips, however, and is *before* adjustment for the
# meters per tile and bits per month scales.
#
# Note that most statistics show *return* trips, so this needs to be calibrated accordingly.
# Note also that, because of rounding errors in the passenger generation multi-threading,
# it is necessary to multiply the numbers by ~1.3 to get the correct results in game at 
# present. The correct number ought to be 120 (3x trips attempted per 16 hours per passenger),
# but 156 must be used to overcome the rounding errors. Likewise, mail is intended to be 5
# but needs to be 7 (rounded up from 6.5) to cope with the rounding errors.
passenger_trips_per_month_hundredths = 156
mail_packets_per_month_hundredths = 7

# This setting determines the maximum number of onward trips that passengers may make on a journey.
# The actual number of onward trips for any given packet of passengers is a random number of anywhere
# between 1 and this figure. This is only applicable if passengers are in fact going to make an onward
# trip, the chance of which is determined by a different setting (see below).
max_onward_trips = 3

# This figure determines how likely that it is that passengers will make any onward trips at all. It
# is expressed in percentage terms.
onward_trip_chance_percent = 25

# This is the chance, in percentage, that any given passenger journey will be a commuting trip. Any
# trip that is not a commuting trip is classed as a visiting trip.
# Data suggests that a minority of trips are commuting trips: see, e.g.
# http://webarchive.nationalarchives.gov.uk/+/http:/www.dft.gov.uk/pgr/statistics/datatablespublications/personal/factsheets/traveltowork.pdf
# and https://www.hertfordshire.gov.uk/media-library/documents/highways/transport-planning/transport-and-accident-data/county-travel-survey/county-travel-survey-summary.pdf
# Assume 1 commuting trip  attempt per day (out of a total of 3 trip attempts per day), multiplied by 5/7ths (0.714)
# multiplied by the proportion of the population in work (fluctuates over time, but assume as 60%), and the figure is close to the 18% suggested in the
# Hertfordshire survey above.
commuting_trip_chance_percent = 20

# Passengers who are not able to find a route will be content to go to an alternative destination. 
# This is set separately for visiting passengers and commuting passengers. It can either be set in
# absolute figures using max_alternative_destinations_visiting and max_alternative_destinations_commuting,
# or set as a proportion of the total number of jobs and total level of visitor demand, using 
# max_alternative_destinations_per_visitor_demand_millionths and max_alternative_destinations_per_job_millionths.
# Using the relative settings is recommended, as this scales much better to the map size.
# 
# This is specified as the maximum number of alternative destinations, as the actual number for any
# given packet of passengers will be randomised between zero and this number. 
#
# This figure strongly affects how many passengers will travel, and also can have a significant effect on
# the computational load.

#max_alternative_destinations_commuting = 6
#max_alternative_destinations_visiting = 12
#min_alternative_destinations_commuting = 2
#min_alternative_destinations_visiting = 1

max_alternative_destinations_per_visitor_demand_millionths = 2750
max_alternative_destinations_per_job_millionths = 5000

min_alternative_destinations_per_visitor_demand_millionths = 750
min_alternative_destinations_per_job_millionths = 2500

# Passengers have a maximum tolerance level for how long that they will spend travelling. 
# Passengers are generated in two groups: commuting and visiting passengers. Commuting 
# passengers travel to find work, whereas visiting passengers travel for other reasons, such
# as leisure, business (i.e., travel between workplaces) and shopping. Each of these two
# different types of passenger has a minimum and maximum journey time tolerance.
#
# The number is  expressed in minutes. For each packet of passengers, the number of minutes
# travelling time (including waiting time) that they are prepared to tolerate is randomised 
# between the minimum and maximum amount using a normal distribution, meaning that the numbers
# are more likely to be in the middle of the range than at either end.

min_visiting_tolerance = 15
range_visiting_tolerance = 12000
min_commuting_tolerance = 30
range_commuting_tolerance = 180

# The following settings determine the way in which individual packets of passengers decide
# what their actual journey time tolerance is, within the above ranges. The options are:
#
# 0 - Even distribution
# Every point between the minimum and maximum is equally likely to be selected
#
# 1 - Normal distribution (http://en.wikipedia.org/wiki/Normal_distribution)
# Points nearer the middle of the range between minimum and maximum are more likely 
# to be selected than points nearer the end of the ranges.
#
# 2 - Positively skewed normal distribution (squared) (http://en.wikipedia.org/wiki/Skewness)
# Points nearer the a point in the range that is not the middle but is nearer to the lower
# end of the range are more likely to be selected. The distance from the middle is the skew.
#
# 3 - Positively skewed normal distribution (cubed)
# As with no. 2, but the degree of skewness (the extent to which the modal point in the range
# is nearer the beginning than the end) is considerably greater.
#
# 4 - Positively skewed normal distribution (squared recursive)
# As with nos. 2 and 3 with an even greater degree of skew.
#
# 5 - Positively skewed normal distribution (cubed recursive)
# As with nos. 2, 3 and 4 with a still greater degree of skew.
#
# 6 and over - Positively skewed normal distribution (cubed multiple recursive)

random_mode_commuting = 2
random_mode_visiting = 6

# The tolerance modifier percentage applies a percentage modification to all visiting passengers'
# journey time tolerances to allow for a more precise adjustment of these numbers than is possible
# with the basic figures alone, especially where a high skew value be used. 
#
# Also, setting this number to zero will disable not only the tolerance modifier percentage, but 
# also the system for modifying the tolerance dynamically based on the visiting passenger success
# rates of the individual buildings from which passengers originate.
#
# The default is 100.

tolerance_modifier_percentage = 66

# meters_per_tile represents the length of each tile in meters. 
# The default is 250.
#
# This setting is used for calculating journey times, revenues, maintenance costs, comfort and
# catering values.
#
# Note that, in versions of Simutrans-Extended (then known as Experimental) before 10.0, the setting "distance_per_tile"
# was used instead. That setting was calculated in tens of meters. If "distance_per_tile" is
# specified in simuconf.tab, it will be converted to meters_per_tile by the game.

meters_per_tile = 200

# These next settings affect the interaction between comfort and revenue. Comfort only
# affects passenger traffic. Passengers have a certain level of comfort that
# they will tolerate for certain distances. All comfort ratings are in the range of between 0 and
# 255. At the tolerable level, the revnue is unaffected. At above the tolerable level, a luxury
# bonus is applied. At below the tolerable level, a discomfort penalty is applied. The values can
# be set to anything, but, to reflect real life, it is suggested that the discomfort penalty is
# significantly higher than the luxury bonus. 
#
# tolerable_comfort_short is the tolerable comfort rating of a vehicle (0 - 255) for a journey of no
# more than tolerable_comfort_short_minutes.
#
# tolerable_comfort_median_short is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_short minutes.
#
# tolerable_comfort_median_median is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_median minutes.
#
# tolerable_comfort_median_long is the tolerable comfort rating of a vehicle for a journey of no more
# than tolerable_comfort_median_long minutes.
#
# tolerable_comfort_long is the tolerable comfort rating of a vehicle for a journey of at least
# tolerable_comfort_long minutes.
#
# For any journeys of a time between any of the values, a scaled proportion is taken. 
# 
# Note that the impact of comfort on revenue decreases with journey time.
# It is at its maximum level down to tolerable_comfort_median_long_minutes, after which it gradually
# reduces to 20% of its maximum at tolerable_comfort_short_minutes, and does not decrease further
# thereafter. Revenue will never decrease below 75% of the base level.

# 0:05h
tolerable_comfort_short_minutes=5
tolerable_comfort_short=10

# 1:00h
tolerable_comfort_median_short_minutes=60
tolerable_comfort_median_short=50

# 2:30h
tolerable_comfort_median_median_minutes=150
tolerable_comfort_median_median=125

# 6:00h
tolerable_comfort_median_long_minutes=360
tolerable_comfort_median_long=165

# 24:00h
tolerable_comfort_long_minutes=1440
tolerable_comfort_long=250

# max_luxury_bonus_differential is the maximum number of comfort rating points above the tolerable level
# that affects the luxury bonus. Anything beyond that, and further added luxury makes no difference to the
# revenue.
#
# max_luxury_bonus_percent is the percentage increase in revenue from the maximum level of luxury specified in
# max_luxury_bonus_differential. So, if the tolerable comfort level for any given travelling time were 100, the 
# max_luxury_bonus_differential 50, and the max_luxury_bonus_percent 50, then the revenue would increase up to
# 50% beyond the normal revenue for additional comfort up to 150, but would not increase further with any increase
# in comfort beyond 150. 

max_luxury_bonus_differential=100
max_luxury_bonus_percent=10

# The discomfort penalty works in exactly the same way as the comfort bonus. max_discomfort_penalty_percent is the
# percentage decrease in revenue from the maximum level of discomfort specified in max_discomfort_penalty_differential. 

max_discomfort_penalty_differential=220
max_discomfort_penalty_percent=30

# These settings control the revenue that can be earned from catering and travelling post offices. Note that catering
# vehicles on a convoy also increase the comfort by a small amount, which has an indirect effect on the revenue. These
# settings do not affect that: these settings affect the revenue earned from the catering itself: i.e., by selling food
# and drink. 
#
# catering_min_minutes is the shortest journey time that will provide any catering revenue. At any value below that, 
# passengers will not bother to buy any food or drink at all. 
#
# catering_level1_minutes is the journey time at which any convoy with a catering level of 1 or higher will earn, per
# passenger, the number of Simu-cents (1/100th of a Simucredit) specified in catering_level1_max_revenue. 
# 
# The same applies for each subsequent catering level: in other words, higher catering levels only earn more than lower
# catering levels on journeys of at least the catering_levelX_minutes (where X is the catering level in question).
#
# Between each level, the a scaled proportion is applied. So, for example, if catering_min_minutes is 100, 
# catering_level1_minutes is 200, and the actual journey time is 150 minutes, then, any convoy with a catering level 
# of at least 1 will earn 50% of the amount specified in catering_level1_max_revenue per passenger. 

catering_min_minutes=15
catering_level1_minutes=20
catering_level1_max_revenue=160
catering_level2_minutes=30
catering_level2_max_revenue=390
catering_level3_minutes=40
catering_level3_max_revenue=830
catering_level4_minutes=60
catering_level4_max_revenue=1600
catering_level5_minutes=80
catering_level5_max_revenue=4400

# Travelling post office revenue is simpler than catering revenue. For every journey that mail makes in a convoy containing
# a travelling post office vehicle (that is, a mail carrying vehicle with a catering level above zero) where the journey time
# exceeds that specified in tpo_min_minutes, the trip will earn the amount specified in tpo_revenue, multiplied by the number
# of mail bags carried, in addition to the ordinary revenue.

tpo_min_minutes=30
tpo_revenue=300

# Passengers who can afford to travel in higher class accommodation on a convoy that also has
# lower class accommodation will only spend the extra money if they consider the additional
# comfort worthwhile. Each passenger's preference for this is randomised on creation. The
# minimum is the same as the maximum comfortable journey time (i.e., at this minimum level,
# the passengers will only pay to travel in more comfortable accommodation if the journey
# time exceeds the maximum comfortable journey time for the lower class of accommodation).
# The maximum a percentage of this figure, set below. For example, if this is set to 500%,
# passengers will travel in a higher class of accommodation if the journey time is more 
# than one fifth of the maximum comfortable journey time of the lower class of accommodation.

max_comfort_preference_percentage = 650

# These settings relate to private car use. See /config/privatecar.tab for
# the configuration of private car ownership for different years.
#
# "Always prefer car percent" is the percentage of drivers who prefer to use their
# car even if walking or taking public transport is faster. The default is 10% 

always_prefer_car_percent = 10

# "Congestion density factor" determines the way in which congestion is calculated.
# If this number is 0, a very simple system is used for calculating congestion.
#
# If this number is > 0, but < 32, this figure represents the factor by which the 
# population density (in citizens per tile) is divided to get a factor multiplied 
# by the number of cars per tile per month to get the congestion figure. In simple
# terms, the lower this number, the easier that it will be for cities to register 
# as congested, and the more likely that it is that passengers will opt for public 
# (i.e., the player's) transport instead. 
#
# If this number is > 32, a system based on data from the TomTom Congestion Index
# (http://www.tomtom.com/lib/doc/congestionindex/2013-0322-TomTom-CongestionIndex-2012-Annual-EUR-mi.pdf)
# is used: the number of private car trips per hour is divided by the length of all
# roads in the city in kilometres then multiplied by the congestion density factor
# to get a percentage figure. When this figure is calculated for all British cities
# in the TomTom Congestion Index in 2012, the average is 141 (1.41). 
#
# NOTE: When the travel time congestion should be implemented, this system 
# will be used only when "assume_everywhere_connected_by_road" be enabled; 
# otherwise, measured per tile congestion figures are used.

congestion_density_factor = 141

# This setting gives the maximum time that passengers are prepared to wait for their
# transport. The setting is divided by speed bonus value to get the number of minutes.
# In pak128.Britain and pak128, the default speed bonus value for passengers is 18. So,
# at the default wait time of 2,700, the maximum time that passengers are prepared to
# wait is 2,700 / 18 = 150 minutes, or two and a half hours. 
#
# The same applies for other sorts of goods: for example, the speed bonus value for
# mail is 15. So, with a passenger_max_wait of 2700, mail would wait for 180 
# minutes before being discarded.
# 
# This is also subject to a maximum of thrice the estimated journey time for the
# whole journey, except where thrice the estimated journty time is less than 1/12th
# of this value.
#
# The speed bonus system has been deprecated, so the relationship to that is
# likely to change shortly.

passenger_max_wait = 19440

# This is the minimum time in minutes that passengers or goods may wait at an airport.
# This simulates the need for check-in, security checks, etc., that makes travelling by
# air a slower process at the boarding stage than transport by other means such as road
# or rail. Setting this to 0 will make air transport behave like any other transport.

min_wait_airport = 90

# These settings determine how players pay for running on the ways of other players. 
#
# toll_runningcost_percentage apportions the specified percentage of the convoy's
# running cost to the player on whose way the convoy is being run.
#
# toll_waycost_percentage apportions the specified percentage of the way tile's
# monthly maintenance cost (and, for electrically powered convoys, also the specified 
# percentage of way objects' monthly maintenance cost) from the convoy for every
# tile of the other player's way over which it passes.
#
# toll_revenue_percentage apportions the specified percentage of the convoy's 
# revenue according to the proportion of the journey that the convoy has undertaken
# on the specified player's way. For example, if way_toll_revenue_percentage is set
# to 50, and the convoy travels half its journey over another player's way, that
# other player will receive 25% of the total revenue for that journey.

toll_runningcost_percentage = 0
toll_waycost_percentage = 10
toll_revenue_percentage = 10

# These settings determine how players pay for landing/docking in the ports
# of other players.
# 
# airport_toll_revenue_percentage is the percentage of the revenue of
# a trip by aircraft charged to a player landing at another player's
# airport.
#
# seaport_toll_revenue_percentage is the percentage of the revenue
# of a trip by sea charged to a player docking at another player's
# sea port.

airport_toll_revenue_percentage = 20
seaport_toll_revenue_percentage = 15

# If this is set to 1, players will not be charged to use roads owned by the public
# service player. This does not affect other sorts of ways. 
# Default: 0

toll_free_public_roads = 1

# If a player has allowed access to its roads to the public player, private
# cars may use those roads. They will pay a toll to do so for every kilometre.
# This is the amount (in simucents: 100 = 1 simucredit; 1 = 1 simucent)
# that the player who owns the road will receive for each km traversed by a
# private car on that road.

private_car_toll_per_km = 15


pak_overrides_savegame_settings = 0


#LIVERY


livery_scheme[0] = Pride
retire_year[0] = 2100
retire_month[0] = 12
livery[0][0] = Pride
intro_year[0][0] = 1920
intro_month[0][0] = 1

livery_scheme[1] = DB_Cargo
retire_year[1] = 2100
retire_month[1] = 1
livery[1][0] = DB_Cargo
intro_year[1][0] = 1996
intro_month[1][0] = 1

livery_scheme[2] = MRCE
retire_year[2] = 2100
retire_month[2] = 1
livery[2][0] = MRCE
intro_year[2][0] = 2001
intro_month[2][0] = 1

livery_scheme[3] = OBB_Upgrade
retire_year[3] = 2100
retire_month[3] = 1
livery[3][0] = OBB_Upgrade
intro_year[3][0] = 2002
intro_month[3][0] = 1

livery_scheme[4] = OBB_Valousek
retire_year[4] = 2002
retire_month[4] = 12
livery[4][0] = OBB_Valousek
intro_year[4][0] = 1988
intro_month[4][0] = 1

livery_scheme[5] = SNCB_new_look
retire_year[5] = 2050
retire_month[5] = 12
livery[5][0] = SNCB_new_look
intro_year[5][0] = 1995
intro_month[5][0] = 1

livery_scheme[6] = C1
retire_year[6] = 2002
retire_month[6] = 12
livery[6][0] = C1
intro_year[6][0] = 1977
intro_month[6][0] = 1

livery_scheme[7] = Hupac
retire_year[7] = 2100
retire_month[7] = 12
livery[7][0] = Hupac
intro_year[7][0] = 2000
intro_month[7][0] = 1

livery_scheme[8] = boxxpress
retire_year[8] = 2100
retire_month[8] = 12
livery[8][0] = boxxpress
intro_year[8][0] = 2000
intro_month[8][0] = 1

livery_scheme[9] = PKP_Cargo
retire_year[9] = 2100
retire_month[9] = 12
livery[9][0] = PKP_Cargo
intro_year[9][0] = 2000
intro_month[9][0] = 1

livery_scheme[10] = DB
retire_year[10] = 1987
retire_month[10] = 1
livery[10][0] = DB
intro_year[10][0] = 1949
intro_month[10][0] = 1

livery_scheme[11] = DB_Orientrot
retire_year[11] = 1997
retire_month[11] = 1
livery[11][0] = DB_Orientrot
intro_year[11][0] = 1986
intro_month[11][0] = 1

livery_scheme[12] = DB_Fernverkehr
retire_year[12] = 2100
retire_month[12] = 1
livery[12][0] = DB_Fernverkehr
intro_year[12][0] = 1996
intro_month[12][0] = 1

livery_scheme[13] = DSB
retire_year[13] = 2045
retire_month[13] = 12
livery[13][0] = DSB
intro_year[13][0] = 1900

livery_scheme[14] = Dispolok
retire_year[14] = 2002
retire_month[14] = 1
livery[14][0] = Dispolok
intro_year[14][0] = 1990
intro_month[14][0] = 1

livery_scheme[15] = alex
retire_year[15] = 2100
retire_month[15] = 1
livery[15][0] = alex
intro_year[15][0] = 1990
intro_month[15][0] = 1

livery_scheme[16] = Urban
retire_year[16] = 2100
retire_month[16] = 1
livery[16][0] = Urban
intro_year[16][0] = 1850
intro_month[16][0] = 1

livery_scheme[17] = LNVG
retire_year[17] = 2100
retire_month[17] = 1
livery[17][0] = LNVG
intro_year[17][0] = 2000
intro_month[17][0] = 1

livery_scheme[18] = BWegt
retire_year[18] = 2100
retire_month[18] = 1
livery[18][0] = BWegt
intro_year[18][0] = 2000
intro_month[18][0] = 1

livery_scheme[19] = NahSH
retire_year[19] = 2100
retire_month[19] = 1
livery[19][0] = NahSH
intro_year[19][0] = 2000
intro_month[19][0] = 1

livery_scheme[20] = DB_Regio
retire_year[20] = 2100
retire_month[20] = 1
livery[20][0] = DB_Regio
intro_year[20][0] = 1996
intro_month[20][0] = 1

livery_scheme[21] = MET
retire_year[21] = 2100
retire_month[21] = 1
livery[21][0] = MET
intro_year[21][0] = 1996
intro_month[21][0] = 1

livery_scheme[22] = RBH
retire_year[22] = 2100
retire_month[22] = 1
livery[22][0] = RBH
intro_year[22][0] = 1996
intro_month[22][0] = 1
